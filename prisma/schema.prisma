// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  TEACHERNOTAPPROVED
  STUDENT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role UserRole @default(STUDENT)
  accounts      Account[]
  student       Student?
  teacher       Teacher?
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  @@unique([email,token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model Teacher {
  id        String    @id @default(cuid())
  name      String?
  image     String?
  students  Student[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String @unique
  tasks     TeacherTask[]
  rating Rating[]
  contentRating ContentRating?
}

model Student {
  id          String    @id @default(cuid())
  name        String?
  image       String?
  grade       String?
  teacher     Teacher   @relation(fields: [teacherId], references: [id],onDelete: Cascade)
  teacherId   String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String @unique
  answers     StudentAnswer[]
  tasks       TeacherTask[]
  rating      Rating?
}

model Question {
  id           String @id @default(cuid())
  type         String
  text         String
  correctAnswer String
  falseAnswer1 String?
  falseAnswer2 String?
  falseAnswer3 String?
  tasks        TeacherTask[]
  studentAnswers StudentAnswer[]
}

model StudentAnswer {
  id          String   @id @default(cuid())
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  givenAnswer String
  isCorrect   Boolean
}

model TeacherTask {
  id          String     @id @default(cuid())
  date        DateTime
  messageText String
  grade       String?
  approvedByAdmin      Boolean @default(false)
  student     Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  teacher     Teacher    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId   String
  questions   Question[]
}

model Rating {
  id          String    @id @default(cuid())
  score       Int
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String    @unique
  teacher     Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId   String
}

model ContentRating {
  id        String    @id @default(cuid())
  comment String?
  teacher   Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String
  rating    Int

  @@unique([teacherId])
}